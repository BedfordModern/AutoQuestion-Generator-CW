@model GroupResultsViewModel
@using static AutoQuestionGenerator.Helper.Extentions
@{
    ViewData["Title"] = "Results";
}

<h2>Results</h2>


@*var questionTypes =
        (from question in Model.Question
         select question.Type.Type_Name).ToList();
    questionTypes = questionTypes.Unique().ToList();*@

<div class="row">
    <div class="col-md-5">
        @if (Model.Question.Length != 0)
        {
            <div style="max-width: 50%; max-height:30%">
                <canvas id="CorrectByType" width="400" height="400"></canvas>
            </div>
            <div style="height:30%">
                <canvas id="Placement" width="400" height="400"></canvas>
            </div>

        }
        else
        {
            <h3>No one has complete this work yet.</h3>
        }
    </div>
    <div class="col-md-4">
        <table id="studentTbl">
            <tr>
                <th onclick="sortTable(0, 'studentTbl')">Name</th>
                <th onclick="sortTable(1, 'studentTbl')">Number of Attempts</th>
                <th onclick="sortTable(2, 'studentTbl')">Best Percentage</th>
                <th onclick="sortTable(3, 'studentTbl')">Worst Percentage</th>
                <th onclick="sortTable(4, 'studentTbl')">Best Question Type</th>
                <th onclick="sortTable(5, 'studentTbl')">Worst Question Type</th>
            </tr>
            @foreach (var item in Model.Averages)
            {
                var x = new List<CompletedQuestion>();
                foreach (var list in item.Questions) { x.AddRange(list); }

                string best = "";
                string worst = "";
                decimal bestper = 0.0m, worstper = 100.0m;
                foreach(var group in x.GroupBy(q => q.Type))
                {
                    if(((decimal)group.Sum(q => q.AnsweredCorrent) / group.Count()) > bestper)
                    {
                        bestper = ((decimal)group.Sum(q => q.AnsweredCorrent) / group.Count());
                        best = group.Key.Type_Name + " " + bestper + "%";
                    }
                    else if (((decimal)group.Sum(q => q.AnsweredCorrent) / group.Count()) < worstper)
                    {
                        worstper = ((decimal)group.Sum(q => q.AnsweredCorrent) / group.Count());
                        worst = group.Key.Type_Name + " " + worstper + "%";
                    }
                }

            <tr>
                <td>@item.Name</td>
                <td>@item.Attempts</td>
                <td>@item.Percentage</td>
                <td>@item.WorstPercentage</td>
                <td>@best</td>
                <td>@worst</td>
            </tr>
            }
        </table>
    </div>
</div>

@if (Model.Question.Length != 0)
{
    <script>
    var options = {
        maintainAspectRatio: false,
        spanGaps: false,
        elements: {
            line: {
                tension: 0.3
            }
        },
        plugins: {
            filler: {
                propagate: false
            }
        },
        scales: {
            xAxes: [{
                type: 'linear',
                ticks: {
                    autoSkip: false,
                    maxRotation: 0
                }
            }],
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    };


    var ctx = document.getElementById("CorrectByType");
            var myChart = new Chart(ctx, {

                type: 'bar',
                data: {

                    labels: [@foreach (var item in Model.questionTypes)
                    {

                        <text>'@item',</text>
                    }],
            datasets: [{
            label: '% of Answers Correct',
                data: [@Model.List.Select(x => x.Percentage).ToList().Connect(","),2,3,4,5],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.4)',
                    'rgba(54, 162, 235, 0.4)',
                    'rgba(255, 206, 86, 0.4)',
                    'rgba(75, 192, 192, 0.4)',
                    'rgba(153, 102, 255, 0.4)',
                    'rgba(255, 159, 64, 0.4)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    },

                    min: 0,
                    max: 100
                }],
                xAxes: [{
                    min: 0,
                    max: 100
                }]
            }
        }
    });
    new Chart('Placement', {
        type: 'line',
        data: {
            datasets: [{
                backgroundColor: 'rgba(255, 99, 132, 0.4)',
                borderColor: 'rgba(255, 99, 132, 1)',
                data: [{ x: 0, y: 0 }, @foreach (var pos in Model.Averages)
                {
                    <Text>{y:@pos.sameCount, x:@pos.Percentage.Percentage}</Text>
                }, { x: 100, y: 0 }],
                label: 'Dataset',
                fill: 'origin'
            }],
        },
        labels: ['0%', @foreach (var item in Model.Averages)
        {
<Text>'@item.UserID',</Text>
        }],
        options: Chart.helpers.merge(options, {
        title: {
            text: 'Averages',
                display: true
            },
            scales: {
            xAxes: [{
                ticks: {
                    autoSkip: false,
                        maxRotation: 0
                    }
                }],
                yAxes: [{
                ticks: {
                    beginAtZero: true,
                        
                    }
                }]
            },
            maintainAspectRatio: false
        })
    });
    </script>
}